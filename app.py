import streamlit as st
import pandas as pd
import plotly.express as px
import requests

# URL for the CVE data
url = "https://services.nvd.nist.gov/rest/json/cves/2.0"

# Title of the app
st.title("CVE Data Visualization")

# Dropdown menu
options = ["View CVE Vulnerabilities", "Option 2", "Option 3"]
selected_option = st.selectbox("Select an option", options)

# Submit button
if st.button("Submit"):
    if selected_option == "View CVE Vulnerabilities":
        # Fetch data from the URL
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()

            # Convert the JSON data to a DataFrame
            cve_items = data.get('vulnerabilities', [])
            cve_list = []

            for item in cve_items:
                cve = item.get('cve', {})
                
                metrics = cve.get('metrics', {})
                # Get the necessary fields with default value as "Not_Provided"
                cve_id = cve.get('id', 'Not_Provided')
                source_identifier = cve.get('sourceIdentifier', 'Not_Provided')
                published = cve.get('published', 'Not_Provided')
                last_modified = cve.get('lastModified', 'Not_Provided')
                vuln_status = cve.get('vulnStatus', 'Not_Provided')
                
                descriptions = cve.get('descriptions', [{}])
                description = descriptions[0].get('value', 'Not_Provided')

                base_score = 'Not_Provided'
                severity = 'Not_Provided'
                
                # Check both cvssMetricV2 and cvssMetricV31 for metrics
                cvss_metrics_v2 = metrics.get('cvssMetricV2', [])
                cvss_metrics_v31 = metrics.get('cvssMetricV31', [])
                
                if cvss_metrics_v31:
                    for metric in cvss_metrics_v31:
                        cvss_data = metric.get('cvssData', {})
                        base_score = cvss_data.get('baseScore', 'Not_Provided')
                        severity = metric.get('baseSeverity', 'Not_Provided')
                elif cvss_metrics_v2:
                    for metric in cvss_metrics_v2:
                        cvss_data = metric.get('cvssData', {})
                        base_score = cvss_data.get('baseScore', 'Not_Provided')
                        severity = metric.get('severity', 'Not_Provided')

                # Add all data to the list
                cve_list.append({
                    'ID': cve_id,
                    'SourceIdentifier': source_identifier,
                    'Published': published,
                    'LastModified': last_modified,
                    'VulnStatus': vuln_status,
                    'Description': description,
                    'BaseScore': base_score,
                    'Severity': severity
                })
            
            df = pd.DataFrame(cve_list)
            
            # Drop rows where severity is 'Not_Provided' to clean up the data
            df = df[df['Severity'] != 'Not_Provided']
            
            # Aggregate the count of each severity type
            severity_counts = df['Severity'].value_counts().reset_index()
            severity_counts.columns = ['Severity', 'Count']
            
            # Define custom colors for each severity type
            colors = {
                'LOW': 'green',
                'MEDIUM': 'yellow',
                'HIGH': 'red',
                # Add any other severities that may exist in your data
                'CRITICAL': 'purple'
            }
            
            # Create a bar chart with custom colors
            fig = px.bar(severity_counts, x='Severity', y='Count', title="Count of CVEs by Severity", labels={'Count': 'Number of CVEs'},
                         color='Severity', color_discrete_map=colors)
            
            # Display the chart in the Streamlit app
            st.plotly_chart(fig)
